# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  userCreate(data: UserCreateInput!, include: UserInclude, select: UserSelect): User!
  userDelete(include: UserInclude, select: UserSelect, where: UserWhereUniqueInput!): User!
  userFindMany(cursor: UserWhereUniqueInput, distinct: UserScalarFieldEnum, include: UserInclude, orderBy: UserOrderByWithRelationInput, select: UserSelect, skip: Int, take: Int, where: UserWhereInput): [User!]!
  userFindUnique(include: UserInclude, select: UserSelect, where: UserWhereUniqueInput!): User
  userUpdate(data: UserUpdateInput!, include: UserInclude, select: UserSelect, where: UserWhereUniqueInput!): User!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  cellphone: String!
  cpf: String!
  createdAt: DateTime!
  firstName: String!
  id: String!
  lastName: String!
  updatedAt: DateTime!
}

input UserCountOutputTypeArgs {
  select: UserCountOutputTypeSelect
}

input UserCountOutputTypeSelect {
  todos: Boolean
}

input UserCreateInput {
  cellphone: String!
  cpf: String!
  createdAt: DateTime
  firstName: String!
  id: String
  lastName: String!
  updatedAt: DateTime
}

input UserInclude {
  _count: UserCountOutputTypeArgs
}

input UserOrderByWithRelationInput {
  cellphone: SortOrder
  cpf: SortOrder
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  updatedAt: SortOrder
}

enum UserScalarFieldEnum {
  cellphone
  cpf
  createdAt
  firstName
  id
  lastName
  updatedAt
}

input UserSelect {
  _count: UserCountOutputTypeArgs
  cellphone: Boolean
  cpf: Boolean
  createdAt: Boolean
  firstName: Boolean
  id: Boolean
  lastName: Boolean
  updatedAt: Boolean
}

input UserUpdateInput {
  cellphone: String
  cpf: String
  createdAt: DateTime
  firstName: String
  id: String
  lastName: String
  updatedAt: DateTime
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  cellphone: StringFilter
  cpf: StringFilter
  createdAt: DateTimeFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  cellphone: String
  cpf: String
  id: String
}